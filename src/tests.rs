#[cfg(test)]
mod build;
#[cfg(test)]
mod jsify;

use crate::code::Code;
use crate::option::CompilerOptions;
use crate::{Compiler, Output, OutputFile};

use karinc::{hir::id::*, input::*};
use maplit::hashmap;

#[test]
fn compiles() {
    let input = InputTree {
        hakos: vec![
            InputHako {
                id: HakoId::new(0),
                mods: vec![
                    InputMod {
                        id: ModId::new(0, 0),
                        path: "my_hako::my_mod".into(),
                        source: "fn f(a bool,b bool){}".to_string(),
                        submods: Vec::new(),
                    },
                ],
            },
        ],
    };
    let options = CompilerOptions {
        output_root_name: "index".to_string(),
    };
    let output = Compiler::compile(&input, &options);
    assert_eq!(
        output,
        Output {
            file: OutputFile {
                name: "index".to_string(),
                ext: "js".to_string(),
                source: Some(
                    Code {
                        source: "/* This source code was automatically generated by karin compiler. */function g$my_hako$my_mod$f(a$0,a$1){}".to_string(),
                    },
                ),
            },
            logs: hashmap! {
                ModId::new(0, 0) => Vec::new(),
            },
        },
    );
}
